
'use client';

import type { ChangeEvent } from 'react';
import { useState } from 'react';
import { DUMMY_FAMILY_GROUPS } from '@/lib/dummy-data'; // To match group names
import type { Contact, FamilyGroup, LabeledAddress } from '@/types';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { FileText, UploadCloud } from 'lucide-react';

interface ImportContactsModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onImport: (contacts: Contact[]) => void;
  allExistingGroups: FamilyGroup[];
}

const EXPECTED_CSV_HEADER = "Name,PhoneNumber,Email,Notes,AddressLabel,Street,City,State,Zip,Country,GroupNames";

export function ImportContactsModal({
  isOpen,
  onOpenChange,
  onImport,
  allExistingGroups,
}: ImportContactsModalProps) {
  const [file, setFile] = useState<File | null>(null);
  const [isParsing, setIsParsing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setFile(event.target.files[0]);
      setError(null); // Clear previous errors
    }
  };

  const parseCSV = (csvText: string): Contact[] => {
    const lines = csvText.trim().split(/\r\n|\n/);
    if (lines.length < 2) {
      throw new Error("CSV must contain a header row and at least one data row.");
    }

    const header = lines[0].split(',').map(h => h.trim());
    const expectedHeaderParts = EXPECTED_CSV_HEADER.split(',');
    
    // Basic header validation (can be made more sophisticated)
    if (header.length < 2 || header[0] !== expectedHeaderParts[0] || header[1] !== expectedHeaderParts[1]) {
       throw new Error(`Invalid CSV header. Expected columns starting with: "${expectedHeaderParts[0]}, ${expectedHeaderParts[1]}, ...". Received: "${header.join(', ')}"`);
    }

    const contacts: Contact[] = [];
    const headerMap: Record<string, number> = {};
    header.forEach((col, index) => headerMap[col] = index);


    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(',').map(v => v.trim().replace(/^"|"$/g, '')); // Basic CSV quote removal

      const name = values[headerMap['Name']];
      const phoneNumber = values[headerMap['PhoneNumber']];

      if (!name || !phoneNumber) {
        console.warn(`Skipping row ${i + 1}: Name and PhoneNumber are required.`);
        continue;
      }
      
      const email = values[headerMap['Email']] || undefined;
      const notes = values[headerMap['Notes']] || undefined;
      
      const addressLabel = values[headerMap['AddressLabel']] || undefined;
      const street = values[headerMap['Street']] || undefined;
      const city = values[headerMap['City']] || undefined;
      const state = values[headerMap['State']] || undefined;
      const zip = values[headerMap['Zip']] || undefined;
      const country = values[headerMap['Country']] || undefined;

      let addresses: LabeledAddress[] | undefined = undefined;
      if (street || city || state || zip || country || addressLabel) {
        addresses = [{
          label: addressLabel,
          street,
          city,
          state,
          zip,
          country,
        }];
      }

      const groupNamesStr = values[headerMap['GroupNames']] || '';
      const groupIds: string[] = [];
      if (groupNamesStr) {
        const groupNames = groupNamesStr.split(';').map(gn => gn.trim().toLowerCase());
        groupNames.forEach(gn => {
          const foundGroup = allExistingGroups.find(g => g.name.toLowerCase() === gn);
          if (foundGroup && !groupIds.includes(foundGroup.id)) {
            groupIds.push(foundGroup.id);
          }
        });
      }

      contacts.push({
        id: '', // Will be generated by the parent component
        name,
        phoneNumber,
        email,
        notes,
        addresses,
        groupIds: groupIds.length > 0 ? groupIds : undefined,
        sources: ['csv'], // Default source for imported contacts
        // avatarUrl, alternativeNumbers, displayNames are not handled in this basic import
      });
    }
    return contacts;
  };

  const handleImportClick = async () => {
    if (!file) {
      setError("Please select a CSV file to import.");
      return;
    }

    setIsParsing(true);
    setError(null);

    try {
      const fileText = await file.text();
      const importedContacts = parseCSV(fileText);
      onImport(importedContacts);
      onOpenChange(false); // Close modal on success
      setFile(null); // Reset file input
    } catch (err: any) {
      console.error("CSV Parsing Error:", err);
      setError(err.message || "An error occurred while parsing the CSV file.");
      toast({
        title: "Import Failed",
        description: err.message || "Please check the file format and try again.",
        variant: "destructive",
      });
    } finally {
      setIsParsing(false);
    }
  };

  const closeModal = () => {
    setFile(null);
    setError(null);
    setIsParsing(false);
    onOpenChange(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <UploadCloud className="h-6 w-6 text-primary" />
            Import Contacts from CSV
          </DialogTitle>
          <DialogDescription>
            Upload a CSV file to add contacts. Ensure the file follows the specified format.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-4">
          <div className="space-y-1">
            <h4 className="text-sm font-medium">CSV File Format:</h4>
            <p className="text-xs text-muted-foreground">
              The first row must be a header row with the following column names (order matters for simple parsing):
            </p>
            <code className="block text-xs p-2 bg-muted rounded-sm overflow-x-auto">
              {EXPECTED_CSV_HEADER}
            </code>
            <ul className="text-xs text-muted-foreground list-disc list-inside pl-2 pt-1">
              <li><span className="font-semibold">Name, PhoneNumber:</span> Required.</li>
              <li><span className="font-semibold">GroupNames:</span> Semicolon (;) separated list of existing group names. Case-insensitive. Non-existing groups will be ignored.</li>
               <li>Other fields are optional.</li>
            </ul>
          </div>

          <Input
            id="csvFile"
            type="file"
            accept=".csv"
            onChange={handleFileChange}
            className="shadow-sm"
            aria-label="CSV file for import"
          />
          
          {file && (
            <div className="text-sm text-muted-foreground flex items-center gap-2 p-2 border rounded-md bg-secondary/50">
              <FileText className="h-5 w-5 text-primary" />
              <span>Selected: {file.name} ({(file.size / 1024).toFixed(2)} KB)</span>
            </div>
          )}

          {error && (
            <Alert variant="destructive">
              <AlertTitle>Import Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
        </div>

        <DialogFooter className="gap-2 sm:gap-0">
          <Button variant="outline" onClick={closeModal} disabled={isParsing}>
            Cancel
          </Button>
          <Button onClick={handleImportClick} disabled={!file || isParsing}>
            {isParsing ? "Parsing..." : "Import Contacts"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
